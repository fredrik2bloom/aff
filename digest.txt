Directory structure:
└── next-app/
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── next-env.d.ts
    ├── package.json
    ├── postcss.config.cjs
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── public/
    │   ├── logo2.webp
    │   └── robots.txt
    └── src/
        ├── vite-env.d.ts
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── not-found.tsx
        │   ├── page.tsx
        │   ├── index/
        │   │   └── page.tsx
        │   ├── kontakt/
        │   │   ├── actions.ts
        │   │   └── page.tsx
        │   └── om-oss/
        │       └── page.tsx
        ├── components/
        │   ├── AgeVerificationModal.tsx
        │   ├── CasinoCardsSection.tsx
        │   ├── CasinoSpecialties.tsx
        │   ├── ComparisonTable.tsx
        │   ├── DetailedCasinoAnalysis.tsx
        │   ├── EvaluationMethodology.tsx
        │   ├── Footer.tsx
        │   ├── Header.tsx
        │   ├── Hero.tsx
        │   ├── Index.tsx
        │   ├── Kontakt.tsx
        │   ├── NotFound.tsx
        │   ├── OmOss.tsx
        │   ├── cards/
        │   │   └── CasinoCard.tsx
        │   └── ui/
        │       ├── accordion.tsx
        │       ├── alert-dialog.tsx
        │       ├── alert.tsx
        │       ├── aspect-ratio.tsx
        │       ├── avatar.tsx
        │       ├── badge.tsx
        │       ├── breadcrumb.tsx
        │       ├── button.tsx
        │       ├── calendar.tsx
        │       ├── card.tsx
        │       ├── carousel.tsx
        │       ├── chart.tsx
        │       ├── checkbox.tsx
        │       ├── collapsible.tsx
        │       ├── command.tsx
        │       ├── context-menu.tsx
        │       ├── dialog.tsx
        │       ├── drawer.tsx
        │       ├── dropdown-menu.tsx
        │       ├── form.tsx
        │       ├── hover-card.tsx
        │       ├── input-otp.tsx
        │       ├── input.tsx
        │       ├── label.tsx
        │       ├── menubar.tsx
        │       ├── navigation-menu.tsx
        │       ├── pagination.tsx
        │       ├── popover.tsx
        │       ├── progress.tsx
        │       ├── radio-group.tsx
        │       ├── resizable.tsx
        │       ├── scroll-area.tsx
        │       ├── select.tsx
        │       ├── separator.tsx
        │       ├── sheet.tsx
        │       ├── sidebar.tsx
        │       ├── skeleton.tsx
        │       ├── slider.tsx
        │       ├── sonner.tsx
        │       ├── StarRating.tsx
        │       ├── switch.tsx
        │       ├── table.tsx
        │       ├── tabs.tsx
        │       ├── textarea.tsx
        │       ├── toast.tsx
        │       ├── toaster.tsx
        │       ├── toggle-group.tsx
        │       ├── toggle.tsx
        │       ├── tooltip.tsx
        │       └── use-toast.ts
        ├── data/
        │   ├── casinos.ts
        │   └── content.ts
        ├── hooks/
        │   ├── use-mobile.tsx
        │   └── use-toast.ts
        └── lib/
            ├── data-service.ts
            └── utils.ts

================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


================================================
FILE: eslint.config.js
================================================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>nordic-casino-glow</title>
    <meta name="description" content="casinoutansvensklicens.eu" />
    <meta name="author" content="Casino Utan Svensk Licens 2025" />

    <meta property="og:title" content="nordic-casino-glow" />
    <meta property="og:description" content="Casino Utan Svensk Licens" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@casinoutansvensklicens.eu" />
    <meta name="twitter:image" content="" />
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.



================================================
FILE: package.json
================================================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@marsidev/react-turnstile": "^1.2.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next": "^14.0.0",
    "next-themes": "^0.3.0",
    "react": "^18.2.0",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "recharts": "^2.12.7",
    "resend": "^4.7.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1"
  }
}



================================================
FILE: postcss.config.cjs
================================================
module.exports = {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      }
  }


================================================
FILE: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))',
					glow: 'hsl(var(--primary-glow))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				success: {
					DEFAULT: 'hsl(var(--success))',
					foreground: 'hsl(var(--success-foreground))'
				},
				warning: {
					DEFAULT: 'hsl(var(--warning))',
					foreground: 'hsl(var(--warning-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				surface: {
					elevated: 'hsl(var(--surface-elevated))',
					hover: 'hsl(var(--surface-hover))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			backgroundImage: {
				'hero-gradient': 'var(--hero-gradient)',
				'hero-pattern': 'var(--hero-pattern)',
				'premium-gradient': 'var(--premium-gradient)'
			},
			boxShadow: {
				'soft': 'var(--shadow-soft)',
				'medium': 'var(--shadow-medium)',
				'large': 'var(--shadow-large)',
				'premium': 'var(--shadow-premium)'
			},
			transitionTimingFunction: {
				'smooth': 'var(--transition-smooth)',
				'bounce': 'var(--transition-bounce)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
FILE: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}



================================================
FILE: tsconfig.json
================================================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false,
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "module": "esnext",
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    ".next/types/**/*.ts",
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: public/logo2.webp
================================================
[Non-text file]


================================================
FILE: public/robots.txt
================================================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /



================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Casino-themed design system with premium colors and gradients */

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 220 13% 13%;

    --card: 0 0% 100%;
    --card-foreground: 220 13% 13%;

    --popover: 0 0% 100%;
    --popover-foreground: 220 13% 13%;

    --primary: 225 83% 48%;
    --primary-foreground: 0 0% 100%;
    --primary-glow: 270 100% 85%;

    --secondary: 220 14% 96%;
    --secondary-foreground: 220 13% 13%;

    --muted: 220 14% 96%;
    --muted-foreground: 220 13% 46%;

    --accent: 217 91% 60%;
    --accent-foreground: 0 0% 100%;

    --success: 142 76% 36%;
    --success-foreground: 0 0% 100%;

    --warning: 217 91% 60%;
    --warning-foreground: 0 0% 100%;

    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;

    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 258 90% 66%;

    /* Casino-specific tokens */
    --hero-gradient: linear-gradient(135deg, hsl(238, 70%, 17%), hsl(240, 52%, 31%));
    --hero-pattern: linear-gradient(135deg, hsla(0, 0%, 56%, 0.1), hsl(240 100% 27% / 0.1));
    --premium-gradient: linear-gradient(135deg, hsl(217 91% 60%), hsl(213 94% 68%));
    --surface-elevated: 0 0% 98%;
    --surface-hover: 258 90% 96%;
    
    /* Shadows */
    --shadow-soft: 0 1px 3px 0 hsl(220 13% 13% / 0.1), 0 1px 2px 0 hsl(220 13% 13% / 0.06);
    --shadow-medium: 0 4px 6px -1px hsl(220 13% 13% / 0.1), 0 2px 4px -1px hsl(220 13% 13% / 0.06);
    --shadow-large: 0 10px 15px -3px hsl(220 13% 13% / 0.1), 0 4px 6px -2px hsl(220 13% 13% / 0.05);
    --shadow-premium: 0 20px 25px -5px hsl(258 90% 66% / 0.3), 0 10px 10px -5px hsl(258 90% 66% / 0.1);

    /* Animations */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-bounce: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}


================================================
FILE: src/app/layout.tsx
================================================
import './globals.css'
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";

  export const metadata = {
    title: 'vite_react_shadcn_ts',
    description: 'Next.js App',
  }
  
  export default function RootLayout({
    children,
  }: {
    children: React.ReactNode
  }) {
    return (
      <html lang="en">
        <body>
          <TooltipProvider>
            <Toaster />
            <Sonner />
            {children}
          </TooltipProvider>
        </body>
      </html>
    )
  }


================================================
FILE: src/app/not-found.tsx
================================================
import NotFound from '@/components/NotFound';
  export default NotFound;


================================================
FILE: src/app/page.tsx
================================================

      import Index from '@/components/Index';
      export default Index;


================================================
FILE: src/app/index/page.tsx
================================================
import Index from '@/components/Index';
export default Index;


================================================
FILE: src/app/kontakt/actions.ts
================================================
// app/kontakt/actions.ts
'use server';

import { z } from 'zod';
import { Resend } from 'resend';

// Initialize Resend with your API key
const resend = new Resend(process.env.RESEND_API_KEY);

// Define the shape of the form data using Zod for validation
const contactFormSchema = z.object({
  name: z.string().min(2, { message: 'Namnet måste vara minst 2 tecken.' }),
  email: z.string().email({ message: 'Ange en giltig e-postadress.' }),
  subject: z.string().min(3, { message: 'Ämnet måste vara minst 3 tecken.' }),
  message: z.string().min(10, { message: 'Meddelandet måste vara minst 10 tecken.' }),
});

// Define the shape of the state that our form action will return
export type FormState = {
  message: string;
  success: boolean;
  errors?: {
    name?: string[];
    email?: string[];
    subject?: string[];
    message?: string[];
  };
};

export async function sendEmail(
  prevState: FormState,
  formData: FormData
): Promise<FormState> {
  // --- SPAM PROTECTION ---

  // 1. Verify Cloudflare Turnstile token
  const turnstileToken = formData.get('cf-turnstile-response');
  
  // The Turnstile secret key from your .env.local file
  const turnstileSecretKey = process.env.CLOUDFLARE_TURNSTILE_SECRET_KEY;

  if (!turnstileToken || !turnstileSecretKey) {
    return { success: false, message: 'CAPTCHA-verifiering misslyckades. Ladda om sidan och försök igen.' };
  }

  try {
    const verificationResponse = await fetch('https://challenges.cloudflare.com/turnstile/v0/siteverify', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        secret: turnstileSecretKey,
        response: turnstileToken,
        // You can optionally pass the user's IP address
        // remoteip: formData.get('remoteip'), // You would need to get the IP from headers if available
      }),
    });

    const verificationData = await verificationResponse.json();

    if (!verificationData.success) {
      console.error('Turnstile verification failed:', verificationData['error-codes']);
      return { success: false, message: 'Spamskyddet misslyckades. Försök igen.' };
    }
  } catch (error) {
    console.error('Error verifying Turnstile token:', error);
    return { success: false, message: 'Kunde inte verifiera spamskyddet. Kontrollera din anslutning.' };
  }


  // 2. Check the Honeypot field
  if (formData.get('fax')) {
    // This is likely a bot. Return a success message to not alert the bot.
    return { success: true, message: 'Tack för ditt meddelande! Vi återkommer snart.' };
  }
  
  // --- END SPAM PROTECTION ---


  // --- FORM VALIDATION & EMAIL LOGIC ---

  // Extract data from the form
  const rawData = {
    name: formData.get('name'),
    email: formData.get('email'),
    subject: formData.get('subject'),
    message: formData.get('message'),
  };

  // Validate the data
  const validatedFields = contactFormSchema.safeParse(rawData);

  // If validation fails, return the errors
  if (!validatedFields.success) {
    return {
      success: false,
      message: 'Formuläret innehåller fel. Vänligen korrigera och försök igen.',
      errors: validatedFields.error.flatten().fieldErrors,
    };
  }

  const { name, email, subject, message } = validatedFields.data;

  try {
    const { data, error } = await resend.emails.send({
      from: 'Kontaktformulär <info@casinoutansvensklicens.eu>', // Your verified Resend domain
      to: ['info@casinoutansvensklicens.eu'], // Your receiving email address
      subject: `Nytt meddelande: ${subject}`,
      replyTo: email, // Set the sender's email as the reply-to address
      html: `
        <h1>Nytt meddelande från kontaktformuläret</h1>
        <p><strong>Namn:</strong> ${name}</p>
        <p><strong>E-post:</strong> ${email}</p>
        <p><strong>Ämne:</strong> ${subject}</p>
        <hr>
        <p><strong>Meddelande:</strong></p>
        <p>${message.replace(/\n/g, '<br>')}</p>
      `,
    });

    if (error) {
      console.error('Resend error:', error);
      return { success: false, message: 'Något gick fel. Försök igen senare.' };
    }

    // Return a success message
    return { success: true, message: 'Tack för ditt meddelande! Vi återkommer snart.' };
  } catch (e) {
    console.error('Send email error:', e);
    return { success: false, message: 'Ett oväntat fel inträffade. Försök igen.' };
  }
}



================================================
FILE: src/app/kontakt/page.tsx
================================================

      import Kontakt from '@/components/Kontakt';
      export default Kontakt;


================================================
FILE: src/app/om-oss/page.tsx
================================================

      import OmOss from '@/components/OmOss';
      export default OmOss;


================================================
FILE: src/components/AgeVerificationModal.tsx
================================================
'use client';

import React, { useState, useEffect } from 'react';
import { Shield } from 'lucide-react';

const AgeVerificationModal = () => {
  // State to control the visibility of the modal.
  const [isVisible, setIsVisible] = useState(false);

  // useEffect runs when the component mounts.
  // It checks if the user has previously verified their age.
  useEffect(() => {
    // We use a timeout to prevent layout shift issues and ensure the page is settled.
    const timer = setTimeout(() => {
      const isVerified = localStorage.getItem('ageVerified') === 'true';
      // If not verified, show the modal.
      if (!isVerified) {
        setIsVisible(true);
      }
    }, 100); // A small delay can help with initial render consistency.

    return () => clearTimeout(timer);
  }, []);

  // Handler for when the user confirms they are over 18.
  const handleYesClick = () => {
    // Store the verification status in localStorage.
    localStorage.setItem('ageVerified', 'true');
    // Hide the modal.
    setIsVisible(false);
  };

  // Handler for when the user says they are not over 18.
  const handleNoClick = () => {
    // Redirect to another website.
    window.location.href = 'https://www.google.com';
  };

  // If the modal is not visible, render nothing.
  if (!isVisible) {
    return null;
  }

  // Render the modal.
  return (
    // Overlay covering the entire screen with a dark, blurred effect
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-900/80 backdrop-blur-lg">
      {/* Modal container with styling inspired by the Hero component */}
      <div className="w-full max-w-md p-8 mx-4 rounded-2xl shadow-2xl bg-gray-800/70 border border-white/20 text-center text-white">
        <div className="flex justify-center mb-6">
          <Shield className="h-16 w-16 text-blue-400" />
        </div>
        <h2 className="text-3xl font-bold mb-4">
          Bekräfta din ålder
        </h2>
        <p className="text-gray-300 mb-8">
          Vänligen bekräfta att du är 18 år eller äldre för att besöka denna sida.
        </p>
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          {/* "Yes" button, styled as a primary action */}
          <button
            onClick={handleYesClick}
            className="w-full px-8 py-3 bg-blue-600 hover:bg-blue-500 text-white font-bold rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-75"
          >
            Ja, jag är över 18
          </button>
          {/* "No" button, styled as a secondary action */}
          <button
            onClick={handleNoClick}
            className="w-full px-8 py-3 bg-gray-600 hover:bg-gray-500 text-white font-semibold rounded-lg shadow-md transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-gray-400"
          >
            Nej, jag är inte över 18
          </button>
        </div>
      </div>
    </div>
  );
};

export default AgeVerificationModal;



================================================
FILE: src/components/CasinoCardsSection.tsx
================================================
import React from 'react';
import { Badge } from './ui/badge';
import { Award } from 'lucide-react';

// 1. Import the getter function and the card component
import { getCasinosForCards } from '@/lib/data-service';
import GlassCasinoCard from './cards/CasinoCard';

const CasinoCardsSection = () => {
    // 2. Fetch the data from our central service
    const casinos = getCasinosForCards();

    return (
        <section className="bg-white py-20">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8">
                <div className="text-center mb-16">
                    <Badge variant="secondary" className="mb-4">
                        <Award className="mr-2 h-4 w-4" />
                        Expertanalys
                    </Badge>
                    <h2 className="text-3xl md:text-4xl lg:text-5xl font-extrabold text-foreground mb-4">
                        Topprankade Casinon
                    </h2>
                    <p className="mt-4 max-w-3xl mx-auto text-lg text-muted-foreground">
                        Vårt team har noggrant testat och utvärderat dussintals casinon för att ge dig en definitiv ranking av de bästa alternativen på marknaden.
                    </p>
                </div>
                
                {/* 3. Map over the real data and render the updated card */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    {casinos.map((casino, index) => (
                        <GlassCasinoCard key={casino.slug} casino={casino} rank={index + 1} />
                    ))}
                </div>
            </div>
        </section>
    );
};

export default CasinoCardsSection;


================================================
FILE: src/components/CasinoSpecialties.tsx
================================================
'use client';

import React, { useState } from 'react';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Card, CardContent, CardTitle } from './ui/card';
import { Trophy, Zap, Gift, Smartphone, Users, DollarSign, Star, CheckCircle2, ArrowRight } from 'lucide-react';

// --- Data remains the same, no changes needed here ---

const specialtyCategories = [
  { id: 'welcome-bonus', name: 'Bäst välkomstbonus', icon: Gift },
  { id: 'mobile', name: 'Bäst mobilcasino', icon: Smartphone },
  { id: 'live-dealer', name: 'Bästa live dealer', icon: Users },
  { id: 'slots', name: 'Störst slotsutbud', icon: Zap },
  { id: 'payouts', name: 'Snabbaste uttagen', icon: DollarSign },
  { id: 'overall', name: 'Totalvinnare', icon: Trophy }
];

const specialtyWinners = {
  'welcome-bonus': { casino: 'Sportium', logo: 'SPORT', offer: '10€ utan insättning + 100% upp till 200€', features: ['Ingen insättning krävs', 'Låga omsättningskrav', 'Förlängd giltighetstid'], rating: 4.8, color: 'bg-purple-700' },
  'mobile': { casino: 'LeoVegas', logo: 'LEO', offer: 'Prisbelönt mobilapp', features: ['Inbyggda appar för iOS/Android', 'Pekskärmsoptimerat gränssnitt', 'Mobil-exklusiva spel'], rating: 4.9, color: 'bg-blue-600' },
  'live-dealer': { casino: 'Casino777', logo: '777', offer: '50+ live dealer-bord', features: ['Flera olika studior', 'HD-kvalitet på streaming', 'Live-spelshower'], rating: 4.7, color: 'bg-green-600' },
  'slots': { casino: 'Luckia', logo: 'LUCK', offer: '3 700+ slotsspel', features: ['Alla stora leverantörer', 'Dagliga nysläpp', 'Progressiva jackpottar'], rating: 4.6, color: 'bg-indigo-800' },
  'payouts': { casino: 'Casumo', logo: 'CAS', offer: 'Uttag inom 24 timmar', features: ['Omedelbara uttag till e-plånböcker', 'Inga uttagsavgifter', 'Verifierad snabb behandling'], rating: 4.7, color: 'bg-red-600' },
  'overall': { casino: 'Casino777', logo: '777', offer: 'Komplett casinoupplevelse', features: ['Bästa spelutbudet', 'Säkerhet i toppklass', 'Utmärkt support'], rating: 4.8, color: 'bg-green-600' }
};


// --- REFACTORED COMPONENT ---

const CasinoSpecialties = () => {
  const [activeCategory, setActiveCategory] = useState('welcome-bonus');
  const winner = specialtyWinners[activeCategory as keyof typeof specialtyWinners];
  const activeCategoryDetails = specialtyCategories.find(cat => cat.id === activeCategory);

  return (
    <section className="py-20 bg-surface-elevated">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <Badge variant="secondary" className="mb-4">
            <Trophy className="mr-2 h-4 w-4" />
            Casinon som matchar dina behov
          </Badge>
          <h2 className="text-3xl md:text-4xl lg:text-5xl font-extrabold text-foreground mb-6">
            Kategorivinnare
          </h2>
          <p className="max-w-3xl mx-auto text-lg text-muted-foreground">
            Olika spelare har olika prioriteringar – så är det bara. Vi hjälper dig hitta casinot som passar dina behov och önskemål.
          </p>
        </div>

        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-12">
          {specialtyCategories.map((category) => {
            const Icon = category.icon;
            const isActive = activeCategory === category.id;
            
            return (
              <Button
                key={category.id}
                variant={isActive ? "default" : "outline"}
                onClick={() => setActiveCategory(category.id)}
                className={`h-auto p-4 flex-col space-y-2 transition-all duration-200 ${isActive ? 'ring-2 ring-primary' : ''}`}
              >
                <Icon className="h-6 w-6" />
                <span className="text-xs font-medium text-center leading-tight">{category.name}</span>
              </Button>
            );
          })}
        </div>

        {/* --- REFACTORED WINNER CARD --- */}
        <Card className="max-w-6xl mx-auto shadow-lg overflow-hidden">
          <CardContent className="p-8 grid grid-cols-1 lg:grid-cols-12 gap-y-8 lg:gap-x-8 items-start">
            
            {/* Column 1: Brand & Rating */}
            <div className="lg:col-span-3 flex flex-col items-center text-center space-y-4">
              <div className={`flex items-center justify-center w-24 h-24 rounded-full ${winner.color} text-white text-2xl font-bold`}>
                {winner.logo}
              </div>
              <div className="text-center">
                 <h3 className="text-2xl font-bold text-foreground">{winner.casino}</h3>
                 <div className="flex items-center justify-center space-x-1 mt-1">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <Star
                        key={star}
                        className={`h-5 w-5 ${winner.rating >= star ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300 fill-gray-300'}`}
                      />
                    ))}
                    <span className="ml-2 text-sm font-medium text-muted-foreground">{winner.rating.toFixed(1)} / 5.0</span>
                 </div>
              </div>
            </div>

            {/* Column 2: Justification & Features */}
            <div className="lg:col-span-5">
              <div className="flex items-center gap-3 mb-1">
                <Trophy className="h-7 w-7 text-primary" />
                <CardTitle className="text-2xl font-bold text-foreground">
                  {activeCategoryDetails?.name}
                </CardTitle>
              </div>
              <p className="text-muted-foreground mb-4">
                Vårt toppval för den bästa upplevelsen i den här kategorin.
              </p>
              <hr className="my-4"/>
              <h4 className="text-md font-semibold text-foreground mb-3">Viktiga egenskaper:</h4>
              <ul className="space-y-2.5">
                {winner.features.map((feature, index) => (
                  <li key={index} className="flex items-start space-x-3">
                    <CheckCircle2 className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                    <span className="text-muted-foreground">{feature}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Column 3: Offer & CTA */}
            <div className="lg:col-span-4 flex flex-col justify-between items-center lg:items-stretch h-full bg-slate-50 dark:bg-slate-800/50 p-6 rounded-lg">
                <div className="text-center lg:text-left">
                    <h4 className="text-lg font-semibold text-foreground mb-2">Specialerbjudande</h4>
                    <p className="text-primary text-lg font-medium">{winner.offer}</p>
                </div>
                <Button size="lg" className="w-full mt-6 lg:mt-0">
                  Besök {winner.casino}
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
            </div>
            
          </CardContent>
        </Card>
      </div>
    </section>
  );
};

export default CasinoSpecialties;


================================================
FILE: src/components/ComparisonTable.tsx
================================================
import React from 'react';
import Image from 'next/image';
import { Award, Calendar, Clock, Star, CheckCircle } from 'lucide-react';
import { Button } from './ui/button';
import { Badge } from './ui/badge';

// 1. Import the getter function from our central service
import { getCasinosForTable } from '@/lib/data-service';

const ComparisonTable = () => {
  // 2. Remove the old mock data and get the dynamic data from the service
  const tableData = getCasinosForTable();

  // This function helps determine the tag for the casino rank
  const getRankTag = (rank: number) => {
    if (rank === 1) return { text: 'Bäst i test', variant: 'default' as const };
    return { text: `#${rank}`, variant: 'secondary' as const };
  };

  return (
    <section className="bg-background py-20">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="mb-12 text-center">
          <Badge variant="secondary" className="mb-4">
            <Award className="mr-2 h-4 w-4" />
            Exklusiv Ranking
          </Badge>
          <h2 className="text-3xl font-extrabold text-foreground md:text-4xl lg:text-5xl">
            Jämförelsetabell för casino utan svensk licens
          </h2>
          <p className="mx-auto mt-4 max-w-2xl text-lg text-muted-foreground">
            Detaljerad analys av varje plattform med viktiga mätvärden för att hjälpa dig välja.
          </p>
        </div>
        
        <div className="overflow-x-auto rounded-2xl shadow-large border border-border">
          <table className="min-w-full">
            <thead className="bg-surface-elevated border-b border-border">
              {/* Table headers remain the same */}
              <tr>
                <th scope="col" className="w-16 px-4 py-5 text-left text-xs font-bold uppercase tracking-wider text-muted-foreground">Rank</th>
                <th scope="col" className="w-48 px-6 py-5 text-left text-xs font-bold uppercase tracking-wider text-muted-foreground">Casino</th>
                <th scope="col" className="w-40 px-6 py-5 text-left text-xs font-bold uppercase tracking-wider text-muted-foreground">Välkomstbonus</th>
                <th scope="col" className="w-24 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground">Omsätt.</th>
                <th scope="col" className="w-24 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground">Spel</th>
                <th scope="col" className="w-20 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground">Live</th>
                <th scope="col" className="w-16 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground"><Calendar className="mx-auto h-4 w-4" /></th>
                <th scope="col" className="w-24 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground"><Clock className="mx-auto h-4 w-4" /></th>
                <th scope="col" className="w-20 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground">Betyg</th>
                <th scope="col" className="w-24 px-4 py-5 text-center text-xs font-bold uppercase tracking-wider text-muted-foreground">Besök</th>
              </tr>
            </thead>
            <tbody className="bg-background divide-y divide-border">
              {/* 3. Map over the new data fetched from the service */}
              {tableData.map((row, index) => {
                const rank = index + 1;
                const rankTag = getRankTag(rank);
                return (
                  <tr key={row.slug} className={`transition-colors hover:bg-slate-50 ${index % 2 === 0 ? 'bg-background' : 'bg-surface-elevated/30'}`}>
                    {/* Rank */}
                    <td className="px-4 py-6">
                      <div className="flex h-10 w-10 items-center justify-center rounded-full text-white font-bold text-lg bg-primary">
                        {rank}
                      </div>
                    </td>
                    {/* Casino */}
                    <td className="px-6 py-6">
                      <div className="flex items-center space-x-4">
                        <div className="flex-shrink-0">
                          {/* Use next/image for the logo */}
                          <Image src={row.logoUrl} alt={`${row.name} logo`} width={48} height={48} className="rounded-lg object-contain" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="text-base font-semibold text-foreground truncate">{row.name}</div>
                          <Badge variant={rankTag.variant} className="mt-1 text-xs">{rankTag.text}</Badge>
                        </div>
                      </div>
                    </td>
                    {/* Bonus */}
                    <td className="px-6 py-6">
                      <div className="text-sm">
                        <div className="font-semibold text-foreground">{row.bonus.main}</div>
                        <div className="text-xs text-muted-foreground mt-1">{row.bonus.details}</div>
                      </div>
                    </td>
                    {/* Wagering */}
                    <td className="px-4 py-6 text-center">
                      <Badge variant="outline" className={`font-semibold ${row.bonus.wagering === '0x' ? 'bg-success/10 text-success border-success/20' : 'bg-warning/10 text-warning border-warning/20'}`}>
                        {row.bonus.wagering}
                      </Badge>
                    </td>
                    {/* Game Count */}
                    <td className="px-4 py-6 text-center">
                      <span className="text-sm font-medium text-foreground">{row.stats.games}</span>
                    </td>
                    {/* Live Game Count */}
                    <td className="px-4 py-6 text-center">
                      <span className="text-sm font-medium text-foreground">{row.stats.live}</span>
                    </td>
                    {/* Checkmark (Assuming all are verified) */}
                    <td className="px-4 py-6 text-center">
                      <CheckCircle className="mx-auto h-5 w-5 text-success" />
                    </td>
                    {/* Payout Time */}
                    <td className="px-4 py-6 text-center">
                      <span className={`text-sm font-semibold ${row.stats.payoutTime === 'Omedelbart' ? 'text-success' : 'text-foreground'}`}>
                        {row.stats.payoutTime}
                      </span>
                    </td>
                    {/* Rating */}
                    <td className="px-4 py-6 text-center">
                      <div className="flex items-center justify-center space-x-1">
                        <Star className="h-4 w-4 text-yellow-400" fill="currentColor" />
                        <span className="text-sm font-bold text-foreground">{row.rating.toFixed(1)}</span>
                      </div>
                    </td>
                    {/* Button */}
                    <td className="px-4 py-6 text-center">
                      <Button variant="outline" size="sm" className="transition-transform hover:scale-105 font-semibold" asChild>
                        <a href={row.affiliateUrl} target="_blank" rel="noopener noreferrer sponsored">Besök</a>
                      </Button>
                    </td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>
      </div>
    </section>
  );
};

export default ComparisonTable;


================================================
FILE: src/components/DetailedCasinoAnalysis.tsx
================================================
'use client';

import React, { useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { Badge } from './ui/badge';
import { Button } from './ui/button';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from './ui/collapsible';
import { Progress } from './ui/progress';
import { ChevronDown, ChevronUp, Shield, Star, CreditCard, Gamepad2, Users, Clock, CheckCircle, XCircle } from 'lucide-react';
import { getCasinosForAnalysis } from '@/lib/data-service';

// Data is fetched once and passed to the client component.
const detailedCasinos = getCasinosForAnalysis();

const DetailedCasinoAnalysis = () => {
  const [expandedCasino, setExpandedCasino] = useState<string | null>(detailedCasinos[0]?.slug || null);

  const toggleExpanded = (casinoSlug: string) => {
    setExpandedCasino(expandedCasino === casinoSlug ? null : casinoSlug);
  };
  
  const categoryNames = {
    security: 'Säkerhet', games: 'Spel', bonuses: 'Bonusar',
    payments: 'Betalningar', support: 'Support', mobile: 'Mobil'
  };
  
  const categoryIcons = {
    security: Shield, games: Gamepad2, bonuses: Star,
    payments: CreditCard, support: Users, mobile: Clock
  };

  return (
    <section className="py-20 bg-background">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <Badge variant="secondary" className="mb-4"><Star className="mr-2 h-4 w-4" />Djupgående Analys</Badge>
          <h2 className="text-3xl md:text-4xl lg:text-5xl font-extrabold text-foreground mb-6">
            Djupgående casinoanalyser
          </h2>
          <p className="max-w-3xl mx-auto text-lg text-muted-foreground">
            Våra experter spenderar veckor med att testa varje casino. Här är vad vi upptäckte under vår omfattande analys.
          </p>
        </div>

        <div className="space-y-8">
          {detailedCasinos.map((casino, index) => (
            // --- NEW STRUCTURE: Collapsible now wraps the entire Card ---
            <Collapsible
              key={casino.slug}
              open={expandedCasino === casino.slug}
              onOpenChange={() => toggleExpanded(casino.slug)}
            >
              <Card className="overflow-hidden transition-all">
                {/* The header has a more robust grid layout that doesn't shift */}
                <CardHeader className="p-6 grid grid-cols-1 sm:grid-cols-3 gap-6 items-center">
                  {/* Left Side: Brand Info */}
                  <div className="sm:col-span-2 flex items-center space-x-4">
                    <div className="flex-shrink-0">
                      <div className="flex h-16 w-16 items-center justify-center rounded-lg bg-slate-100 p-2">
                        <Image src={casino.logoUrl} alt={`${casino.name} logo`} width={48} height={48} className="object-contain" />
                      </div>
                    </div>
                    <div>
                      <div className="flex items-center space-x-3">
                        <Badge variant="outline" className="text-sm">#{index + 1}</Badge>
                        <CardTitle className="text-2xl">{casino.name}</CardTitle>
                      </div>
                      <p className="text-muted-foreground mt-1">{casino.editorial.tagline}</p>
                    </div>
                  </div>

                  {/* Right Side: Rating & Trigger Button */}
                  <div className="sm:col-span-1 flex items-center justify-start sm:justify-end space-x-4">
                    <div className="text-right">
                      <div className="flex items-center justify-end space-x-1">
                        {/* Yellow stars added */}
                        {[1,2,3,4,5].map(star => 
                          <Star key={star} className={`h-5 w-5 ${casino.rating >= star ? 'text-yellow-400 fill-yellow-400' : 'text-slate-300'}`} />
                        )}
                      </div>
                      <div className="text-sm text-muted-foreground mt-1">{casino.rating.toFixed(1)} / 5.0 Betyg</div>
                    </div>
                    <CollapsibleTrigger asChild>
                      <Button variant="outline" size="icon" className="flex-shrink-0">
                        {expandedCasino === casino.slug ? (
                          <ChevronUp className="h-5 w-5" />
                        ) : (
                          <ChevronDown className="h-5 w-5" />
                        )}
                        <span className="sr-only">Toggle analysis</span>
                      </Button>
                    </CollapsibleTrigger>
                  </div>
                </CardHeader>

                {/* The content now appears cleanly below the header */}
                <CollapsibleContent>
                  <CardContent className="px-6 pb-6 pt-0">
                    <div className="space-y-8 border-t pt-6">
                      {/* Detailed Scores */}
                      <div>
                        <h3 className="text-lg font-semibold text-foreground mb-6">Detaljerad Genomgång</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                          {Object.entries(casino.analysisScores).map(([category, data]) => {
                            const Icon = categoryIcons[category as keyof typeof categoryIcons];
                            const categoryName = categoryNames[category as keyof typeof categoryNames];
                            
                            return (
                              <div key={category} className="space-y-3">
                                <div className="flex items-center space-x-2">
                                  <Icon className="h-5 w-5 text-primary" />
                                  <span className="font-medium text-foreground">{categoryName}</span>
                                  <span className="ml-auto text-sm font-bold text-primary">{data.score}/100</span>
                                </div>
                                <Progress value={data.score} className="h-2" />
                                <p className="text-sm text-muted-foreground">{data.details}</p>
                              </div>
                            );
                          })}
                        </div>
                      </div>

                      {/* Pros and Cons */}
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        <div>
                          <h4 className="text-lg font-semibold text-foreground mb-4 flex items-center"><CheckCircle className="mr-2 h-5 w-5 text-green-500" />Fördelar</h4>
                          <ul className="space-y-2">
                            {casino.editorial.pros.map((pro, index) => (
                              <li key={index} className="flex items-start space-x-2">
                                <CheckCircle className="h-4 w-4 text-green-500 mt-1 flex-shrink-0" />
                                <span className="text-muted-foreground text-sm">{pro}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-lg font-semibold text-foreground mb-4 flex items-center"><XCircle className="mr-2 h-5 w-5 text-red-500" />Nackdelar</h4>
                          <ul className="space-y-2">
                            {casino.editorial.cons.map((con, index) => (
                              <li key={index} className="flex items-start space-x-2">
                                <XCircle className="h-4 w-4 text-red-500 mt-1 flex-shrink-0" />
                                <span className="text-muted-foreground text-sm">{con}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>

                      {/* Expert Verdict */}
                      <div className="bg-slate-50 p-6 rounded-lg border">
                        <h4 className="text-lg font-semibold text-foreground mb-3">Expertens Omdöme</h4>
                        <p className="text-muted-foreground leading-relaxed">{casino.editorial.verdict}</p>
                      </div>

                      <div className="flex justify-center pt-4">
                        <Button size="lg" className="px-8" asChild>
                          <Link href={casino.affiliateUrl} target="_blank" rel="noopener noreferrer sponsored">Besök {casino.name}</Link>
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </CollapsibleContent>
              </Card>
            </Collapsible>
          ))}
        </div>
      </div>
    </section>
  );
};

export default DetailedCasinoAnalysis;


================================================
FILE: src/components/EvaluationMethodology.tsx
================================================
import React from 'react';
import { Badge } from './ui/badge';
import { Progress } from './ui/progress';
import { Shield, Star, CreditCard, Gamepad2, HeadphonesIcon, Clock } from 'lucide-react';

const evaluationCriteria = [
  {
    name: 'Säkerhet & Licensiering',
    weight: 25,
    icon: Shield,
    description: 'Officiell licensiering, kryptering och regelefterlevnad'
  },
  {
    name: 'Spelkvalitet & Utbud',
    weight: 20,
    icon: Gamepad2,
    description: 'Storlek på spelkatalogen, mjukvaruleverantörer och exklusiva titlar'
  },
  {
    name: 'Bonusar & Kampanjer',
    weight: 20,
    icon: Star,
    description: 'Välkomsterbjudanden, pågående kampanjer och rättvisa omsättningskrav'
  },
  {
    name: 'Betalningsmetoder',
    weight: 15,
    icon: CreditCard,
    description: 'Insättnings-/uttagsalternativ, behandlingstider och avgifter'
  },
  {
    name: 'Kundtjänst',
    weight: 10,
    icon: HeadphonesIcon,
    description: 'Tillgänglighet dygnet runt, svarstider och supportkvalitet'
  },
  {
    name: 'Användarupplevelse',
    weight: 10,
    icon: Clock,
    description: 'Webbplatshastighet, mobilanpassning och enkel navigering'
  }
];

const EvaluationMethodology = () => {
  return (
    <section className="py-20 bg-background">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <Badge variant="secondary" className="mb-4">
            <Shield className="mr-2 h-4 w-4" />
            Om vår metodik
          </Badge>
          <h2 className="text-3xl md:text-4xl lg:text-5xl font-extrabold text-foreground mb-6">
            Hur vi utvärderar casinon
          </h2>
          <p className="max-w-3xl mx-auto text-lg text-muted-foreground">
          Vårt expertteam använder ett omfattande 100-poängssystem för att testa och recensera varje casino. 
          Vi satsar riktiga pengar, spelar riktiga spel och testar varje funktion för att ge dig ärliga, opartiska recensioner.
          Läs mer om oss, vårt mål, och våra experter  
          <a href="/om-oss" className="text-primary hover:underline ml-1">här</a>.
        </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          <div className="space-y-8">
            {evaluationCriteria.map((criterion, index) => {
              const Icon = criterion.icon;
              return (
                <div key={index} className="group">
                  <div className="flex items-start space-x-4">
                    <div className="flex-shrink-0">
                      <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center group-hover:bg-primary/20 transition-colors">
                        <Icon className="h-6 w-6 text-primary" />
                      </div>
                    </div>
                    <div className="flex-1 space-y-3">
                      <div className="flex items-center justify-between">
                        <h3 className="text-lg font-semibold text-foreground">{criterion.name}</h3>
                        <span className="text-sm font-medium text-primary">{criterion.weight}%</span>
                      </div>
                      <p className="text-muted-foreground text-sm">{criterion.description}</p>
                      <Progress value={criterion.weight * 4} className="h-2" />
                    </div>
                  </div>
                </div>
              );
            })}
          </div>

          <div className="bg-surface-elevated rounded-2xl p-8">
            <h3 className="text-2xl font-bold text-foreground mb-6">Vår Testprocess</h3>
            <div className="space-y-6">
              <div className="flex items-start space-x-4">
                <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">1</div>
                <div>
                  <h4 className="font-semibold text-foreground">Registrering & Verifiering</h4>
                  <p className="text-muted-foreground text-sm">Vi skapar riktiga konton och slutför hela verifieringsprocessen</p>
                </div>
              </div>
              <div className="flex items-start space-x-4">
                <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">2</div>
                <div>
                  <h4 className="font-semibold text-foreground">Test med Riktiga Pengar</h4>
                  <p className="text-muted-foreground text-sm">Vi sätter in och spelar med riktiga pengar för att testa alla funktioner</p>
                </div>
              </div>
              <div className="flex items-start space-x-4">
                <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">3</div>
                <div>
                  <h4 className="font-semibold text-foreground">Test av Uttag</h4>
                  <p className="text-muted-foreground text-sm">Vi testar uttagsprocesser och verifierar faktiska utbetalningstider</p>
                </div>
              </div>
              <div className="flex items-start space-x-4">
                <div className="w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-bold">4</div>
                <div>
                  <h4 className="font-semibold text-foreground">Kundtjänst</h4>
                  <p className="text-muted-foreground text-sm">Vi testar alla supportkanaler och mäter svarstider</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default EvaluationMethodology;


================================================
FILE: src/components/Footer.tsx
================================================
import { ShieldCheck, Users, Info, MessageSquare, Phone, AlertTriangle } from 'lucide-react';

// A simple component for the 18+ icon
const EighteenPlusIcon = () => (
  <div className="flex h-8 w-8 items-center justify-center rounded-full border-2 border-slate-400 font-bold text-slate-400 text-sm">
    18+
  </div>
);

const Footer = () => {
  return (
    <footer className="bg-slate-900 text-slate-300">
      <div className="container mx-auto px-6 pt-16 pb-8">
        
        {/* Top Section: Main Message & Trust Symbols */}
        <div className="text-center">
          <h2 className="text-3xl font-bold text-white">Ansvarsfullt Spelande</h2>
          <p className="mx-auto mt-4 max-w-3xl leading-relaxed text-slate-400">
            Spel ska vara en form av underhållning, inte ett sätt att tjäna pengar. Vi är engagerade i att främja en säker och ansvarsfull spelmiljö. Spela med måtta och inom dina gränser.
          </p>
        </div>
        
        <div className="mt-8 mb-12 flex flex-wrap justify-center gap-x-8 gap-y-4 text-sm font-medium">
          <div className="flex items-center gap-2">
            <EighteenPlusIcon />
            <span>Endast för personer över 18 år</span>
          </div>
          <div className="flex items-center gap-2">
            <ShieldCheck className="h-5 w-5 text-slate-400" />
            <span>Säkert & Tryggt</span>
          </div>
          <div className="flex items-center gap-2">
            <a href="https://www.spelpaus.se" target="_blank" rel="noopener noreferrer" className="flex items-center gap-2 hover:text-white">
              <Info className="h-5 w-5 text-slate-400" />
              <span>Läs om Spelpaus.se</span>
            </a>
          </div>
        </div>
        
        <div className="w-full border-t border-slate-800 my-12"></div>

        {/* Main Content: 4-Column Layout */}
        <div className="grid grid-cols-1 gap-8 text-sm md:grid-cols-2 lg:grid-cols-4">
          
          {/* Column 1: About Us */}
          <div className="space-y-4">
            <h3 className="font-semibold text-white uppercase tracking-wider">Om Oss</h3>
            <p className="text-slate-400">
              Casinoutansvensklicens.eu är en oberoende jämförelsesajt för casinon. Vårt mål är att ge transparent och korrekt information för att hjälpa dig göra välgrundade val.
            </p>
          </div>

          {/* Column 2: Warning Signs */}
          <div className="space-y-4">
            <h3 className="font-semibold text-white uppercase tracking-wider">Varningssignaler</h3>
            <ul className="space-y-2 text-slate-400">
              <li className="flex items-start gap-2"><AlertTriangle className="h-4 w-4 mt-1 flex-shrink-0" /><span>Du spelar för mer än du har råd med.</span></li>
              <li className="flex items-start gap-2"><AlertTriangle className="h-4 w-4 mt-1 flex-shrink-0" /><span>Spel påverkar ditt humör eller relationer.</span></li>
              <li className="flex items-start gap-2"><AlertTriangle className="h-4 w-4 mt-1 flex-shrink-0" /><span>Du försöker vinna tillbaka förluster.</span></li>
            </ul>
          </div>

          {/* Column 3: Help & Support */}
          <div className="space-y-4">
            <h3 className="font-semibold text-white uppercase tracking-wider">Hjälp & Stöd</h3>
            <ul className="space-y-3 text-slate-400">
              <li className="flex items-center gap-2">
                <Phone className="h-4 w-4 flex-shrink-0" />
                <span>Stödlinjen: <a href="tel:020-819100" className="hover:text-white hover:underline">020-81 91 00</a></span>
              </li>
              <li className="flex items-center gap-2">
                <Users className="h-4 w-4 flex-shrink-0" />
                <a href="https://www.spelpaus.se" target="_blank" rel="noopener noreferrer" className="hover:text-white hover:underline">Spelpaus.se</a>
              </li>
            </ul>
          </div>

          {/* Column 4: Quick Links */}
          <div className="space-y-4">
            <h3 className="font-semibold text-white uppercase tracking-wider">Snabblänkar</h3>
            <ul className="space-y-2 text-slate-400">
              <li><a href="/kontakt" className="hover:text-white hover:underline">Kontakta oss</a></li>
              <li><a href="/om-oss" className="hover:text-white hover:underline">Om oss</a></li>
            </ul>
          </div>

        </div>

        {/* Bottom Border & Copyright */}
        <div className="mt-16 w-full border-t border-slate-800 pt-8 text-center">
          <p className="text-sm text-slate-500">
            Copyright © {new Date().getFullYear()} - casinoutansvensklicens.eu. Alla rättigheter förbehållna.
          </p>
        </div>
      </div>
    </footer>
  );
};

export default Footer;


================================================
FILE: src/components/Header.tsx
================================================
'use client';

import Link from "next/link";
import React, { useState } from 'react';
import { Menu, X } from 'lucide-react';

const Header = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <header className="sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border shadow-soft">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <div className="flex-shrink-0">
            <Link href="/" className="flex items-center transition-smooth hover:opacity-100">
              <span className="sr-only">Casino utan svensk licens</span>
              <img 
                src="logo2.webp" 
                alt="Casino utan svensk licens" 
                className="h-12 w-auto"
              />
            </Link>
          </div>
          
          {/* Desktop Menu */}
          <nav className="hidden md:block">
            <div className="ml-10 flex items-baseline space-x-4">
              <Link 
                href="/" 
                className="px-3 py-2 rounded-md text-sm font-medium text-foreground hover:bg-surface-hover hover:text-primary transition-smooth"
              >
                Hem
              </Link>
              <Link 
                href="/om-oss" 
                className="px-3 py-2 rounded-md text-sm font-medium text-foreground hover:bg-surface-hover hover:text-primary transition-smooth"
              >
                Om oss
              </Link>
              <Link 
                href="/kontakt" 
                className="px-3 py-2 rounded-md text-sm font-medium text-foreground hover:bg-surface-hover hover:text-primary transition-smooth"
              >
                Kontakt
              </Link>
            </div>
          </nav>
          
          {/* Mobile Menu Button */}
          <div className="-mr-2 flex md:hidden">
            <button 
              onClick={() => setIsOpen(!isOpen)} 
              className="inline-flex items-center justify-center p-2 rounded-md text-muted-foreground hover:text-primary hover:bg-surface-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-smooth"
              aria-controls="mobile-menu"
              aria-expanded={isOpen}
            >
              <span className="sr-only">Öppna huvudmeny</span>
              {isOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>
      </div>
      {/* Mobile Menu Dropdown */}
      {isOpen && (
        <nav className="md:hidden border-t border-border" id="mobile-menu">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-background">
            <Link 
              href="/" 
              className="block px-3 py-2 rounded-md text-base font-medium text-foreground hover:bg-surface-hover hover:text-primary transition-smooth"
            >
              Hem
            </Link>
            <Link 
              href="/om-oss" 
              className="block px-3 py-2 rounded-md text-base font-medium text-foreground hover:bg-surface-hover hover:text-primary transition-smooth"
            >
              Om oss
            </Link>
            <Link 
              href="/kontakt" 
              className="block px-3 py-2 rounded-md text-base font-medium text-foreground hover:bg-surface-hover hover:text-primary transition-smooth"
            >
              Kontakt
            </Link>
          </div>
        </nav>
      )}
    </header>
  );
};

export default Header;


================================================
FILE: src/components/Hero.tsx
================================================
import React from 'react';
import Image from 'next/image';
import Link from 'next/link';
import StarRating from './ui/StarRating';
import { Button } from './ui/button';

// 1. Import the getter function from your new service
import { getFeaturedHeroCasino } from '@/lib/data-service';

const Hero = () => {
  // 2. Call the function to get the data
  const featured = getFeaturedHeroCasino();

  // Handle case where data might not be found
  if (!featured) return <div>Featured casino not found.</div>;

  return (
    <section className="relative overflow-hidden bg-hero-gradient">
      {/* Clover background */}
      <div
        className="absolute inset-0 opacity-15 mix-blend-multiply"
        style={{
            backgroundImage: 'url("/clover.png")',
        }}
        ></div>

      <div className="relative z-10 mx-auto max-w-7xl px-4 py-20 text-center text-primary-foreground sm:px-6 lg:py-28 lg:px-8">
        <h1 className="text-4xl font-extrabold leading-tight md:text-6xl lg:text-7xl">
          Casino Utan Svensk Licens
        </h1>
        <p className="mt-4 text-lg font-semibold text-primary-glow">
          Bäst casino utan svensk licens -{' '}
          {new Date()
            .toLocaleDateString('sv-SE', { month: 'long', year: 'numeric' })
            .replace(/^\w/, (c) => c.toUpperCase())}!
        </p>

        <div className="mx-auto mt-12 max-w-4xl rounded-2xl bg-background/10 backdrop-blur-md border border-primary-foreground/20 p-6 shadow-premium md:p-8">
          <div className="grid grid-cols-1 items-center gap-6 md:grid-cols-3">
            <div className="flex flex-col items-center text-center md:items-start md:text-left">
              <div className="h-10 mb-2">
                <Image
                  src={featured.logoWhiteUrl || featured.logoUrl} // Use white logo if available
                  alt={`${featured.name} logo`}
                  width={120}
                  height={40}
                  className="object-contain"
                />
              </div>
              <div className="mt-2 flex items-center">
                <StarRating
                  rating={featured.rating}
                  iconClassName="h-5 w-5"
                  fillColor="text-yellow-400"
                  emptyColor="text-white/30"
                />
                <span className="ml-2 text-sm font-bold">{featured.rating.toFixed(1)}</span>
              </div>
            </div>

            <div className="border-t-2 border-primary-foreground/20 px-6 py-6 md:border-t-0 md:border-l-2 md:border-r-2 md:py-0">
              <p className="text-sm font-semibold text-primary-glow">Välkomstbonus</p>
              <p className="mt-1 text-3xl font-bold text-primary-foreground lg:text-4xl">
                {featured.bonus.main}
              </p>
              {featured.bonus.details && (
                <p className="mt-1 text-sm text-primary-glow">{featured.bonus.details}</p>
              )}
            </div>

            <div className="w-full">
              <Link href={featured.affiliateUrl} target="_blank" rel="noopener noreferrer sponsored">
                <Button>Prova {featured.name} nu! →</Button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Hero;


================================================
FILE: src/components/Index.tsx
================================================
'use server'

import Header from "../components/Header";
import Hero from "../components/Hero";
import CasinoCardsSection from "../components/CasinoCardsSection";
import EvaluationMethodology from "../components/EvaluationMethodology";
import DetailedCasinoAnalysis from "../components/DetailedCasinoAnalysis";
import CasinoSpecialties from "../components/CasinoSpecialties";
import ComparisonTable from "../components/ComparisonTable";
import Footer from "../components/Footer";
import AgeVerificationModal from "../components/AgeVerificationModal"; // 1. Import the component

const Index = () => {
  return (
    <div className="min-h-screen bg-background">
      <AgeVerificationModal /> {/* 2. Add the component here */}
      <Header />
      <Hero />
      <CasinoCardsSection />
      <ComparisonTable />
      <EvaluationMethodology />
      <DetailedCasinoAnalysis />
      <CasinoSpecialties />
      <Footer />
    </div>
  );
};

export default Index;


================================================
FILE: src/components/Kontakt.tsx
================================================
// Mark this as a Client Component to use hooks
'use client';

import { useEffect, useRef, useState } from 'react';
import { useFormState, useFormStatus } from 'react-dom';
import { Turnstile } from '@marsidev/react-turnstile';

// Your existing imports
import Header from '../components/Header';
import Footer from './Footer';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Mail, MessageSquare, Clock, Loader2, Plus, Minus } from 'lucide-react';

// Import the server action and its state type
import { sendEmail, type FormState } from '@/app/kontakt/actions';

// --- FAQ Data ---
const faqItems = [
  {
    question: 'Hur recenserar ni casinon?',
    answer: 'Vår process är grundlig. Vi registrerar ett konto, sätter in pengar, testar spelutbudet, utvärderar bonusvillkor, kontaktar kundtjänsten och gör ett uttag. Allt för att ge en rättvis och komplett bild av casinot.',
  },
  {
    question: 'Är bonusarna ni listar alltid aktuella?',
    answer: 'Vi strävar efter att hålla all information, inklusive bonusar, så uppdaterad som möjligt. Casinon kan dock ändra sina erbjudanden utan förvarning. Vi rekommenderar därför att du alltid dubbelkollar villkoren på casinots egen webbplats.',
  },
  {
    question: 'Kan ni hjälpa mig att välja ett casino?',
    answer: 'Absolut! Våra recensioner och topplistor är designade för att hjälpa dig. Läs igenom dem för att se vilket casino som bäst matchar dina preferenser gällande spel, bonusar och betalningsmetoder. Om du har en specifik fråga, tveka inte att kontakta oss.',
  },
  {
    question: 'Jag har ett förslag på ett casino ni borde recensera. Hur gör jag?',
    answer: 'Vi älskar förslag från våra läsare! Skicka ett meddelande till oss via kontaktformuläret med namnet på casinot, så kommer vi att titta närmare på det för en eventuell framtida recension.',
  },
];

// --- Reusable FAQ Accordion Component ---
const FAQ = () => {
  const [openIndex, setOpenIndex] = useState<number | null>(null);

  const toggleItem = (index: number) => {
    setOpenIndex(openIndex === index ? null : index);
  };

  return (
    <div className="bg-surface-elevated rounded-lg p-6 border border-border">
      <h3 className="font-semibold text-foreground mb-4">Vanliga frågor</h3>
      <div className="space-y-3">
        {faqItems.map((item, index) => (
          <div key={index} className="border-b border-border/50 last:border-b-0">
            <button
              onClick={() => toggleItem(index)}
              className="w-full flex justify-between items-center text-left py-3 focus:outline-none"
            >
              <span className="font-medium text-foreground">{item.question}</span>
              {openIndex === index ? <Minus className="h-5 w-5 text-primary" /> : <Plus className="h-5 w-5 text-muted-foreground" />}
            </button>
            {openIndex === index && (
              <div className="pb-3 pr-4 text-muted-foreground text-sm transition-all duration-300">
                <p>{item.answer}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};


// A helper component for the submit button to show a pending state
function SubmitButton() {
  const { pending } = useFormStatus();

  return (
    <Button type="submit" className="w-full bg-primary hover:bg-primary/90" disabled={pending}>
      {pending ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Skickar...
        </>
      ) : (
        'Skicka meddelande'
      )}
    </Button>
  );
}

// Inline styles for the hidden honeypot field
const honeypotStyles: React.CSSProperties = {
  position: 'absolute',
  left: '-5000px',
  opacity: '0',
};

const Kontakt = () => {
  // useFormState hook to manage form state
  const initialState: FormState = { message: '', success: false };
  const [state, formAction] = useFormState(sendEmail, initialState);
  const formRef = useRef<HTMLFormElement>(null);
  const turnstileRef = useRef<any>(null);

  // Reset the form and Turnstile widget if the submission was successful
  useEffect(() => {
    if (state.success) {
      formRef.current?.reset();
      turnstileRef.current?.reset();
    }
  }, [state.success]);

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl md:text-5xl font-bold text-foreground mb-8 text-center">
            Kontakt
          </h1>
          
          <div className="grid lg:grid-cols-2 gap-8">
            <div>
              <Card className="border-border">
                <CardHeader>
                  <CardTitle className="text-primary">Skicka oss ett meddelande</CardTitle>
                </CardHeader>
                <CardContent>
                  <form ref={formRef} action={formAction} className="space-y-4">
                    <div>
                      <label htmlFor="name" className="block text-sm font-medium text-foreground mb-2">
                        Namn
                      </label>
                      <Input id="name" name="name" placeholder="Ditt namn" required />
                      {state.errors?.name && <p className="text-sm text-red-500 mt-1">{state.errors.name[0]}</p>}
                    </div>
                    
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-foreground mb-2">
                        E-post
                      </label>
                      <Input id="email" name="email" type="email" placeholder="din@email.com" required />
                      {state.errors?.email && <p className="text-sm text-red-500 mt-1">{state.errors.email[0]}</p>}
                    </div>
                    
                    <div>
                      <label htmlFor="subject" className="block text-sm font-medium text-foreground mb-2">
                        Ämne
                      </label>
                      <Input id="subject" name="subject" placeholder="Vad gäller ditt meddelande?" required />
                      {state.errors?.subject && <p className="text-sm text-red-500 mt-1">{state.errors.subject[0]}</p>}
                    </div>
                    
                    <div>
                      <label htmlFor="message" className="block text-sm font-medium text-foreground mb-2">
                        Meddelande
                      </label>
                      <Textarea 
                        id="message" 
                        name="message"
                        placeholder="Skriv ditt meddelande här..." 
                        className="min-h-[120px]"
                        required
                      />
                      {state.errors?.message && <p className="text-sm text-red-500 mt-1">{state.errors.message[0]}</p>}
                    </div>

                    <div style={honeypotStyles} aria-hidden="true">
                      <label htmlFor="fax">Fax</label>
                      <input type="text" id="fax" name="fax" tabIndex={-1} autoComplete="off" />
                    </div>

                    <Turnstile
                      ref={turnstileRef}
                      siteKey={process.env.NEXT_PUBLIC_CLOUDFLARE_TURNSTILE_SITE_KEY!}
                      options={{ theme: 'light' }}
                    />
                    
                    <SubmitButton />

                    {state.message && (
                      <p className={`text-sm mt-2 ${state.success ? 'text-green-500' : 'text-red-500'}`}>
                        {state.message}
                      </p>
                    )}
                  </form>
                </CardContent>
              </Card>
            </div>
            
            <div className="space-y-6">
               <Card className="border-border">
                <CardContent className="p-6">
                  <div className="flex items-start space-x-4">
                    <div className="bg-primary/10 p-3 rounded-lg">
                      <Mail className="h-6 w-6 text-primary" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-foreground mb-2">E-post</h3>
                      <p className="text-muted-foreground">
                        info@casinoutansvensklicens.se
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              <Card className="border-border">
                <CardContent className="p-6">
                  <div className="flex items-start space-x-4">
                    <div className="bg-primary/10 p-3 rounded-lg">
                      <MessageSquare className="h-6 w-6 text-primary" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-foreground mb-2">Support</h3>
                      <p className="text-muted-foreground">
                        Vi hjälper till med frågor om casinorecensioner, 
                        bonusar och allmän vägledning.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              
              {/* Replace the old list with the new FAQ component */}
              <FAQ />
              
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Kontakt;



================================================
FILE: src/components/NotFound.tsx
================================================

  export default function NotFound() {
    return (
      <div>
        <h1>404 - Page Not Found</h1>
      </div>
    );
  }


================================================
FILE: src/components/OmOss.tsx
================================================
'use server'

import Header from "../components/Header";
import Image from "next/image";
import { Star } from "lucide-react";
import Footer from "../components/Footer";

const experts = [
  {
    name: 'Niklas Johanneson',
    title: 'Chefredaktör & Grundare',
    imageSrc: '/authors/niklas-portrait.png',
    bio: 'Jag har snart ett decennium erfarenhet av iGaming branschen, både som spelare och proffesionellt. Mitt mål är att lyfta sajter av hög kvalité.',
    expertise: 'Spelutbud, Ansvarsfullt spelande, Säkerhet'
  },
  {
    name: 'Fredrik Blom',
    title: 'Medgrundare & Skribent',
    imageSrc: '/authors/fredrik-portrait.png',
    bio: 'Med ena foten i techvärlden, och andra i iGaming världen, har jag bra koll på vad som gör en spelsida bra. UX, betalningslösningar och spelupplevelse väger tyngst för mig.',
    expertise: 'Spelupplevelse, Betalningslösningar, UX'
  }
];

const OmOss = () => {
  return (
    <div className="min-h-screen bg-background">
      <Header />
      <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl md:text-5xl font-bold text-foreground mb-8 text-center">
            Om oss
          </h1>
          
          <div className="prose prose-lg max-w-none space-y-8">
            <div className="bg-surface-elevated rounded-lg p-8 border border-border">
              <h2 className="text-2xl font-bold text-primary mb-4">Vårt mål och syfte</h2>
              <p className="text-muted-foreground">
                Vi på casinoutansvensklicens.eu är dedikerade till att ge dig den mest kompletta och pålitliga informationen om casino utan svensk licens. 
                Vårt team av experter arbetar ständigt för att utvärdera och recensera de bästa alternativen på marknaden.
              </p>
            </div>

            <div className="grid md:grid-cols-2 gap-8">
              <div className="bg-surface-elevated rounded-lg p-6 border border-border">
                <h3 className="text-xl font-semibold text-primary mb-3">Expertanalys</h3>
                <p className="text-muted-foreground">
                  Våra experter har över 10 års erfarenhet inom online gambling-industrin och utvärderar varje casino 
                  baserat på säkerhet, spel, bonusar och användarupplevelse.
                </p>
              </div>
              
              <div className="bg-surface-elevated rounded-lg p-6 border border-border">
                <h3 className="text-xl font-semibold text-primary mb-3">Transparens</h3>
                <p className="text-muted-foreground">
                  Vi tror på total transparens. Alla våra recensioner är oberoende och baserade på faktisk testning 
                  och användarfeedback.
                </p>
              </div>
            </div>

            {/* --- SECTION CONTAINER UPDATED --- */}
            <div className="relative bg-surface-elevated rounded-lg p-8 border border-border overflow-hidden">
              {/* --- CLOVER BACKGROUND PATTERN MOVED HERE --- */}
              <div
                className="absolute inset-0 opacity-5 mix-blend-multiply"
                style={{
                    backgroundImage: 'url("/clover.png")',
                    backgroundSize: '300px',
                }}
              ></div>
              {/* ------------------------------------------- */}

              {/* Content Wrapper to ensure it sits on top of the pattern */}
              <div className="relative">
                <h2 className="text-2xl font-bold text-primary mb-16 text-center">Möt våra experter</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-16 md:gap-y-8">
                  {experts.map((expert) => (
                    // The individual author card no longer has the pattern or overflow-hidden
                    <div key={expert.name} className="relative bg-background p-6 rounded-lg shadow-md border border-border">
                      {/* Overlapping Image */}
                      <div className="absolute left-1/2 -translate-x-1/2 -top-12 w-24 h-24">
                        <Image
                          src={expert.imageSrc}
                          alt={`Porträtt av ${expert.name}`}
                          width={96}
                          height={96}
                          className="rounded-full object-cover border-4 border-background shadow-lg"
                        />
                      </div>
                      
                      {/* Content */}
                      <div className="mt-12 text-center">
                        <h4 className="text-xl font-bold text-foreground">{expert.name}</h4>
                        <p className="text-sm text-primary font-semibold">{expert.title}</p>
                        <p className="text-muted-foreground mt-4 text-base leading-relaxed">{expert.bio}</p>
                      </div>

                      {/* Expertise Tags */}
                      <div className="mt-6 border-t border-border pt-4">
                        <h5 className="text-sm font-bold text-foreground text-center mb-3">Kärnkompetens</h5>
                        <div className="flex flex-wrap justify-center gap-2">
                          {expert.expertise.split(',').map(skill => (
                            <div key={skill} className="bg-primary/10 text-primary text-xs font-semibold px-3 py-1 rounded-full">
                              {skill.trim()}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

        
          </div>
        </div>
      </main>
      <Footer/>
    </div>
  );
};

export default OmOss;


================================================
FILE: src/components/cards/CasinoCard.tsx
================================================
import React from 'react';
import { Star, Check } from 'lucide-react';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '../ui/card';
import Image from 'next/image';
import { Casino } from '@/data/casinos'; // Import the unified Casino type

// The component now accepts a single `casino` prop
interface GlassCasinoCardProps {
  casino: Casino;
  rank: number;
}

const GlassCasinoCard: React.FC<GlassCasinoCardProps> = ({ casino, rank }) => {
  // Destructure properties from the single casino object for easy use
  const { name, logoUrl, rating, bonus, editorial, affiliateUrl, colors } = casino;

  return (
    <Card className="h-full flex flex-col overflow-hidden rounded-2xl bg-slate-50 border border-slate-200/80 shadow-lg transition-all duration-300 ease-in-out hover:shadow-xl hover:-translate-y-1 hover:border-slate-300">
      <CardHeader className="relative p-6">
        {rank === 1 && (
            <Badge className="absolute top-4 left-4 z-10 font-bold" variant="default">BÄSTA CASINOT</Badge>
        )}
        <div className="flex items-center space-x-4 pt-6">
          <div className="relative flex-shrink-0">
            <div className="w-20 h-20 bg-white rounded-xl flex items-center justify-center p-2 border-2 border-slate-200 shadow-md">
                <Image src={logoUrl} alt={`${name} logo`} width={64} height={64} className="object-contain" />
            </div>
            <div className="absolute -top-2 -left-2 w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-extrabold text-sm border-2 border-white">
              {rank}
            </div>
          </div>
          <div className="flex flex-col justify-center">
            <CardTitle className="text-2xl font-bold text-slate-800">{name}</CardTitle>
            <div className="flex items-center space-x-1 mt-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <Star
                  key={star}
                  className={`h-5 w-5 ${rating >= star ? 'text-yellow-400 fill-yellow-400' : 'text-slate-300 fill-slate-200'}`}
                />
              ))}
              <span className="ml-2 text-sm font-bold text-slate-600">{rating.toFixed(1)}</span>
            </div>
          </div>
        </div>
      </CardHeader>

      <CardContent className="px-6 flex flex-col flex-grow">
        <hr className="border-slate-200" />
        <div className="my-6">
          <p className="text-sm font-semibold text-primary">Välkomsterbjudande</p>
          <p className="text-2xl font-bold text-slate-900">{bonus.main}</p>
          {bonus.details && (
            <p className="text-sm text-slate-500">{bonus.details}</p>
          )}
        </div>
        <div className="flex-grow">
          <ul className="space-y-3">
            {editorial.pros.slice(0, 3).map((feature, index) => (
              <li key={index} className="flex items-start space-x-3">
                <Check className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                <span className="text-sm text-slate-600">{feature}</span>
              </li>
            ))}
          </ul>
        </div>
      </CardContent>

      <CardFooter className="p-6 pt-0">
        <Button size="lg" className={`w-full font-bold text-base transition-opacity ${colors.button} hover:opacity-90 shadow-lg`} asChild>
          <a href={affiliateUrl} target="_blank" rel="noopener noreferrer sponsored">Besök {name}</a>
        </Button>
      </CardFooter>
    </Card>
  );
};

export default GlassCasinoCard;



